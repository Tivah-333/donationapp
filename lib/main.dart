import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'services/fcm_service.dart';

import 'package:flutter/foundation.dart' show kIsWeb;
import 'firebase_options.dart'; // <-- generated by flutterfire configure

import 'login_screen.dart';
import 'signup_screen.dart';
import 'donor_home.dart';
import 'organization_home.dart';
import 'admin_home.dart';
import 'manage_users.dart';

import 'welcome_screen.dart';
import 'view_reports.dart';
import 'org_status_screen.dart';
import 'admin_org_approval.dart';
import 'admin_settings.dart';
import 'admin_notifications.dart';
import 'admin_profile_page.dart';
import 'donation_statistics_page.dart';
import 'create_donation_request.dart';
import 'organization_settings.dart';
import 'report_problem_page.dart';
import 'org_contact_support_page.dart';
import 'org_notifications.dart';
import 'make_donation.dart';
import 'donors_donation_history.dart';
import 'donor_notification_setting.dart';
import 'donor_contact_support_page.dart';
import 'donor_report_problem_page.dart';
import 'donor_settings.dart';
import 'donor_profile.dart';
import 'forgot_password_screen.dart';
import 'distribute_donations.dart';
import 'organization_donation_requests.dart';
import 'admin_donation_requests.dart';
import 'donor_notifications_page.dart';
import 'test_notifications.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Initialize FCM for push notifications
  await FCMService.initialize();

  if (kIsWeb) {
    // Connect to Firebase emulators when running in Chrome/web
    FirebaseFirestore.instance.useFirestoreEmulator('localhost', 8080);
    FirebaseAuth.instance.useAuthEmulator('localhost', 9099);
  }

  runApp(const CharityBridgeApp());
}

class CharityBridgeApp extends StatefulWidget {
  const CharityBridgeApp({super.key});

  @override
  State<CharityBridgeApp> createState() => _CharityBridgeAppState();
}

class _CharityBridgeAppState extends State<CharityBridgeApp> {
  bool isDarkMode = false;

  void toggleDarkMode(bool value) {
    setState(() {
      isDarkMode = value;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Charity Bridge',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.deepPurple,
          brightness: Brightness.light,
        ),
        useMaterial3: true,
        brightness: Brightness.light,
      ),
      darkTheme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.deepPurple,
          brightness: Brightness.dark,
        ),
        useMaterial3: true,
        brightness: Brightness.dark,
      ),
      themeMode: isDarkMode ? ThemeMode.dark : ThemeMode.light,
      initialRoute: '/',
      routes: {
        '/': (context) => const AuthWrapper(),
        '/welcome': (context) => const WelcomeScreen(),
        '/login': (context) => const LoginScreen(),
        '/signup': (context) => const SignupScreen(),
        '/donor': (context) => const DonorHome(),
        '/organization': (context) => const OrganizationHome(),
        '/admin': (context) => const AdminHome(),
        '/manageUsers': (context) => const ManageUsersPage(),

        '/distributeDonations': (context) => const DistributeDonationsPage(),
        '/viewReports': (context) => const ViewReportsPage(),
        '/orgStatus': (context) => const OrgStatusScreen(status: 'pending'),
        '/admin/org-approvals': (context) => const AdminOrgApprovalDashboard(),
        '/admin/settings': (context) => AdminSettingsPage(
          isDarkMode: isDarkMode,
          onDarkModeChanged: toggleDarkMode,
        ),
        '/admin/notifications': (context) => const AdminNotificationsPage(),
        '/admin/donation-requests': (context) => const AdminDonationRequestsPage(),
        '/admin/profile': (context) => const AdminProfilePage(),
        '/organization/statistics': (context) =>
        const DonationStatisticsPage(),
        '/createRequest': (context) => const CreateDonationRequestPage(),
        '/organization/settings': (context) =>
        OrganizationSettingsPage(
          isDarkMode: isDarkMode,
          onDarkModeChanged: toggleDarkMode,
        ),
        '/reportProblem': (context) => const ReportProblemPage(),
        '/contactSupport': (context) => const OrgContactSupportPage(),
        '/organization/notifications': (context) =>
        const OrgNotificationsPage(),
        '/organization/donation-requests': (context) =>
        const OrganizationDonationRequestsPage(),
        '/donate': (context) => const MakeDonationPage(),
        '/donor/history': (context) => const DonorsDonationHistoryPage(),
        '/donor/notifications': (context) => const DonorNotificationsPage(),
        '/donor/support': (context) => const DonorContactSupportPage(),
        '/donor/report': (context) => const DonorReportProblemPage(),
        '/donor/settings': (context) => DonorSettingsPage(
          isDarkMode: isDarkMode,
          onDarkModeChanged: toggleDarkMode,
        ),
        '/donor/profile': (context) => const DonorProfilePage(),
        '/forgot-password': (context) => ForgotPasswordScreen(),
        '/distributeDonations': (context) => const DistributeDonationsPage(),
        '/test-notifications': (context) => const TestNotificationsPage(),
        
      },
    );
  }
}

class AuthWrapper extends StatelessWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context) {
    return StreamBuilder<User?>(
      stream: FirebaseAuth.instance.authStateChanges(),
      builder: (context, snapshot) {
        // Waiting for Firebase Auth
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Scaffold(
            body: Center(child: CircularProgressIndicator()),
          );
        }

        final user = snapshot.data;

        // No user is logged in
        if (user == null) return const WelcomeScreen();

        // User is logged in â€“ check Firestore for their role
        return FutureBuilder<DocumentSnapshot>(
          future: FirebaseFirestore.instance.collection('users').doc(user.uid).get(),
          builder: (context, roleSnapshot) {
            if (roleSnapshot.connectionState == ConnectionState.waiting) {
              return const Scaffold(
                body: Center(child: CircularProgressIndicator()),
              );
            }

            // If user document doesn't exist
            if (!roleSnapshot.hasData || !roleSnapshot.data!.exists) {
              WidgetsBinding.instance.addPostFrameCallback((_) {
                FirebaseAuth.instance.signOut();
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('User data not found.')),
                );
              });
              return const LoginScreen();
            }

            final data = roleSnapshot.data!.data() as Map<String, dynamic>?;

            final role = data?['role'] as String?;
            final status = data?['status'] as String? ?? 'approved';

            // Redirect based on role and org status
            switch (role) {
              case 'Donor':
                return const DonorHome();
              case 'Organization':
                if (status == 'pending' || status == 'rejected') {
                  return OrgStatusScreen(status: status);
                }
                return const OrganizationHome();
              case 'Administrator':
                return const AdminHome();
              default:
                WidgetsBinding.instance.addPostFrameCallback((_) {
                  FirebaseAuth.instance.signOut();
                });
                return const LoginScreen();
            }
          },
        );
      },
    );
  }
}
